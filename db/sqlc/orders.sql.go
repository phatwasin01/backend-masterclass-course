// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: orders.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id,
  event_id,
  amount,
  sum_price,
  payment
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, event_id, amount, sum_price, payment, created_at
`

type CreateOrderParams struct {
	UserID   string         `json:"user_id"`
	EventID  int64          `json:"event_id"`
	Amount   int32          `json:"amount"`
	SumPrice int32          `json:"sum_price"`
	Payment  sql.NullString `json:"payment"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.EventID,
		arg.Amount,
		arg.SumPrice,
		arg.Payment,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Amount,
		&i.SumPrice,
		&i.Payment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderId = `-- name: GetOrderId :one
SELECT id, user_id, event_id, amount, sum_price, payment, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderId(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderId, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Amount,
		&i.SumPrice,
		&i.Payment,
		&i.CreatedAt,
	)
	return i, err
}

const listOrdersEvent = `-- name: ListOrdersEvent :many
SELECT id, user_id, event_id, amount, sum_price, payment, created_at FROM orders
WHERE event_id = $1
`

func (q *Queries) ListOrdersEvent(ctx context.Context, eventID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Amount,
			&i.SumPrice,
			&i.Payment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersUser = `-- name: ListOrdersUser :many
SELECT id, user_id, event_id, amount, sum_price, payment, created_at FROM orders
WHERE user_id = $1
`

func (q *Queries) ListOrdersUser(ctx context.Context, userID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Amount,
			&i.SumPrice,
			&i.Payment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

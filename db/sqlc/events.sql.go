// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: events.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name,
  organizer_id,
  price,
  amount,
  description,
  start_time
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type CreateEventParams struct {
	Name        string         `json:"name"`
	OrganizerID int64          `json:"organizer_id"`
	Price       int32          `json:"price"`
	Amount      int32          `json:"amount"`
	Description sql.NullString `json:"description"`
	StartTime   time.Time      `json:"start_time"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Name,
		arg.OrganizerID,
		arg.Price,
		arg.Amount,
		arg.Description,
		arg.StartTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizerID,
		&i.Price,
		&i.Amount,
		&i.AmountSold,
		&i.Description,
		&i.IsClosed,
		&i.AmountRedeem,
		&i.StartTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizerID,
		&i.Price,
		&i.Amount,
		&i.AmountSold,
		&i.Description,
		&i.IsClosed,
		&i.AmountRedeem,
		&i.StartTime,
		&i.CreatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at FROM events
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrganizerID,
			&i.Price,
			&i.Amount,
			&i.AmountSold,
			&i.Description,
			&i.IsClosed,
			&i.AmountRedeem,
			&i.StartTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsOpen = `-- name: ListEventsOpen :many
SELECT id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at FROM events
WHERE is_closed = false
ORDER BY start_time
`

func (q *Queries) ListEventsOpen(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventsOpen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrganizerID,
			&i.Price,
			&i.Amount,
			&i.AmountSold,
			&i.Description,
			&i.IsClosed,
			&i.AmountRedeem,
			&i.StartTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventAmount = `-- name: UpdateEventAmount :exec
UPDATE events 
SET amount = $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventAmountParams struct {
	ID     int64 `json:"id"`
	Amount int32 `json:"amount"`
}

func (q *Queries) UpdateEventAmount(ctx context.Context, arg UpdateEventAmountParams) error {
	_, err := q.db.ExecContext(ctx, updateEventAmount, arg.ID, arg.Amount)
	return err
}

const updateEventName = `-- name: UpdateEventName :exec
UPDATE events 
SET name = $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateEventName(ctx context.Context, arg UpdateEventNameParams) error {
	_, err := q.db.ExecContext(ctx, updateEventName, arg.ID, arg.Name)
	return err
}

const updateEventPrice = `-- name: UpdateEventPrice :exec
UPDATE events 
SET price = $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventPriceParams struct {
	ID    int64 `json:"id"`
	Price int32 `json:"price"`
}

func (q *Queries) UpdateEventPrice(ctx context.Context, arg UpdateEventPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateEventPrice, arg.ID, arg.Price)
	return err
}

const updateEventRedeem = `-- name: UpdateEventRedeem :exec
UPDATE events 
SET amount_redeem = amount_redeem + $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventRedeemParams struct {
	ID           int64 `json:"id"`
	AmountRedeem int32 `json:"amount_redeem"`
}

func (q *Queries) UpdateEventRedeem(ctx context.Context, arg UpdateEventRedeemParams) error {
	_, err := q.db.ExecContext(ctx, updateEventRedeem, arg.ID, arg.AmountRedeem)
	return err
}

const updateEventSold = `-- name: UpdateEventSold :exec
UPDATE events 
SET amount_sold = amount_sold + $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventSoldParams struct {
	ID         int64 `json:"id"`
	AmountSold int32 `json:"amount_sold"`
}

func (q *Queries) UpdateEventSold(ctx context.Context, arg UpdateEventSoldParams) error {
	_, err := q.db.ExecContext(ctx, updateEventSold, arg.ID, arg.AmountSold)
	return err
}

const updateEventStart = `-- name: UpdateEventStart :exec
UPDATE events 
SET start_time = $2
WHERE id = $1
RETURNING id, name, organizer_id, price, amount, amount_sold, description, is_closed, amount_redeem, start_time, created_at
`

type UpdateEventStartParams struct {
	ID        int64     `json:"id"`
	StartTime time.Time `json:"start_time"`
}

func (q *Queries) UpdateEventStart(ctx context.Context, arg UpdateEventStartParams) error {
	_, err := q.db.ExecContext(ctx, updateEventStart, arg.ID, arg.StartTime)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tickets.sql

package db

import (
	"context"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets (
  user_id,
  event_id,
  order_id,
  ticket_uuid
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, event_id, order_id, is_redeemed, ticket_uuid, created_at
`

type CreateTicketParams struct {
	UserID     string `json:"user_id"`
	EventID    int64  `json:"event_id"`
	OrderID    int64  `json:"order_id"`
	TicketUuid string `json:"ticket_uuid"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.UserID,
		arg.EventID,
		arg.OrderID,
		arg.TicketUuid,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.OrderID,
		&i.IsRedeemed,
		&i.TicketUuid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const getTicketOrder = `-- name: GetTicketOrder :many
SELECT id, user_id, event_id, order_id, is_redeemed, ticket_uuid, created_at FROM tickets
WHERE order_id = $1 AND user_id = $2
`

type GetTicketOrderParams struct {
	OrderID int64  `json:"order_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetTicketOrder(ctx context.Context, arg GetTicketOrderParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketOrder, arg.OrderID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.OrderID,
			&i.IsRedeemed,
			&i.TicketUuid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketUser = `-- name: GetTicketUser :one
SELECT id, user_id, event_id, order_id, is_redeemed, ticket_uuid, created_at FROM tickets
WHERE user_id = $1
`

func (q *Queries) GetTicketUser(ctx context.Context, userID string) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketUser, userID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.OrderID,
		&i.IsRedeemed,
		&i.TicketUuid,
		&i.CreatedAt,
	)
	return i, err
}

const redeemTicket = `-- name: RedeemTicket :exec
UPDATE tickets SET is_redeemed = $2
WHERE id = $1
RETURNING (user_id,event_id,order_id,ticket_uuid)
`

type RedeemTicketParams struct {
	ID         int64 `json:"id"`
	IsRedeemed bool  `json:"is_redeemed"`
}

func (q *Queries) RedeemTicket(ctx context.Context, arg RedeemTicketParams) error {
	_, err := q.db.ExecContext(ctx, redeemTicket, arg.ID, arg.IsRedeemed)
	return err
}
